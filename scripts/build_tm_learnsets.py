import re
import json
import argparse

# Constants matching the C config
MAX_NUM_TMHMS = 128
TM_LEARNSETS_BITS_PER_WORD = 32
TM_LEARNSETS_BITFIELD_COUNT = MAX_NUM_TMHMS // TM_LEARNSETS_BITS_PER_WORD


def load_species_header(file_path):
    species_dict = {}
    index = 0
    with open(file_path) as f:
        for line in f:
            if len(line.split()) > 1:
                test = line.split()[1].strip()
                if 'SPECIES' in test and not '_START' in test and not '_SPECIES_H' in test and not '_NUM (' in line and not 'MAX_' in test:
                    species_dict[test] = index
                    index += 1
    return species_dict


def load_moves_header(file_path):
    moves_dict = {}
    index = 0
    with open(file_path) as f:
        for line in f:
            if len(line.split()) > 1:
                test = line.split()[1].strip()
                if 'MOVE' in test and not '_START' in test and not '_MOVES_H' in test and not 'NUM_OF' in test:
                    moves_dict[test] = index
                    index += 1
    return moves_dict


def load_tmhm_list(file_path):
    move_list = []
    in_array = False
    move_pattern = re.compile(r'\bMOVE_[A-Z0-9_]+')

    with open(file_path, encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if 'static const u16 sTMHMMoves[]' in line:
                in_array = True
                continue
            if in_array:
                if '};' in line:
                    break
                matches = move_pattern.findall(line)
                move_list.extend(matches)

    return move_list


def write_tm_bitfields(tmhm_moves, species_dict, moves_dict, species_learnsets, output_path):
    tm_move_to_index = {
        move_name: idx
        for idx, move_name in enumerate(tmhm_moves)
        if move_name in moves_dict
    }

    max_species_index = max(species_dict.values())
    species_id_to_name = {v: k for k, v in species_dict.items()}

    with open(output_path, "w") as out:
        out.write("// DO NOT MODIFY THIS FILE!  autogenerated by build_tm_learnsets.py\n\n")
        out.write("#include \"../include/types.h\"\n")
        out.write("#include \"../include/config.h\"\n")
        out.write("#include \"../include/pokemon.h\"\n")
        out.write("#include \"../include/constants/species.h\"\n")
        out.write("#include \"../include/constants/item.h\"\n\n")
        out.write(f"const u32 UNUSED TMLearnsets[][TM_LEARNSETS_BITFIELD_COUNT] = {{\n")

        for species_id in range(max_species_index + 1):
            species_name = species_id_to_name.get(species_id)
            learnset = []
            if species_name:
                learnset = species_learnsets.get(species_name, {}).get("TMMoves", [])
                learnset = list(set(m.strip() for m in learnset))

            parts = [0] * TM_LEARNSETS_BITFIELD_COUNT
            for move in learnset:
                tm_index = tm_move_to_index.get(move)
                if tm_index is not None and tm_index < MAX_NUM_TMHMS:
                    word = tm_index // TM_LEARNSETS_BITS_PER_WORD
                    bit = tm_index % TM_LEARNSETS_BITS_PER_WORD
                    parts[word] |= (1 << bit)

            formatted = ", ".join(f"0x{val:08X}" for val in parts)
            out.write(f"    [{species_name}] = {{ {formatted} }},\n")

        out.write("};\n")



if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--learnsets", default="data/moves/learnsets.json")
    parser.add_argument("--output", default="data/TMLearnsets.c")

    args = parser.parse_args()

    tmhm_moves = load_tmhm_list("src/item.c")
    species_dict = load_species_header("include/constants/species.h")
    moves_dict = load_moves_header("include/constants/moves.h")

    with open(args.learnsets, encoding="utf-8") as f:
        species_learnsets = json.load(f)

    write_tm_bitfields(tmhm_moves, species_dict, moves_dict, species_learnsets, args.output)
